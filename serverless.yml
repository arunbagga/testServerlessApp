service: notes
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ap-south-1


functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEBCLIENT_ID: !Ref cognitoUserPoolWebClient


  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:UpdateItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:DeleteItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer

  readAllNotes:
    handler: handler.readAllNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Scan
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: get
          path: notes
          authorizer: 
            name: userPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn  # Works. By default, serverless expects lambda authoriser. so we have to mention type: COGNITO_USER_POOLS if we need to use this method.
            # arn: ${ssm:/notes/${self:provider.stage}/userPoolId} # Works but first I need to deploy without this function. next I need to deploy with this function. to make sure that ssm parameter gets created
            # arn: arn:aws:cognito-idp:ap-south-1:723314854221:userpool/ap-south-1_xwXRfCjoD

# you can add CloudFormation resource templates here
resources:
  Resources:
    ${file(resources.yml)}

plugins:
  - serverless-iam-roles-per-function